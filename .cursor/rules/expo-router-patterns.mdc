---
description: Expo Router navigation and structure patterns
globs: ["**/app/**", "**/_layout.tsx"]
alwaysApply: false
---

# Expo Router Patterns

## 📁 App Directory Structure

```
app/
├── _layout.tsx              # Root layout with providers
├── (tabs)/                  # Tab navigator group
│   ├── _layout.tsx         # Tabs configuration
│   ├── index.tsx           # Home tab
│   ├── card.tsx            # Card tab
│   └── profile/            # Profile tab (with drawer)
│       ├── _layout.tsx     # Drawer configuration
│       └── index.tsx       # Profile screen
├── modal.tsx               # Modal screen
├── send.tsx                # Send modal
└── +not-found.tsx          # 404 screen
```

## 🎯 Screen Component Pattern

### ✅ ALWAYS follow this pattern:

```typescript
// app/(tabs)/my-screen.tsx
import { Stack } from 'expo-router';
import { MyFeatureScreen } from '~/features/my-feature';
import { useTranslation } from '~/features/i18n';

export default function MyScreenPage() {
  const { t } = useTranslation();
  
  return (
    <>
      <Stack.Screen options={{ title: t('navigation.myScreen') }} />
      <MyFeatureScreen />
    </>
  );
}
```

### 🎯 Key Points:
1. **Screen component in app/** - routing only
2. **Actual content in features/** - reusable logic
3. **Stack.Screen** for screen options
4. **Use translation** for titles

## 📱 Tab Layout Pattern

```typescript
// app/(tabs)/_layout.tsx
import { Tabs } from 'expo-router';
import { TabBarIcon } from '~/components/tab-bar-icon';
import { useColorScheme } from '~/lib/use-color-scheme';

export default function TabLayout() {
  const { colors } = useColorScheme();
  
  return (
    <Tabs
      screenOptions={{
        headerShown: true,
        tabBarActiveTintColor: colors.primary,
        tabBarInactiveTintColor: colors.grey3,
        tabBarStyle: {
          backgroundColor: colors.card,
          borderTopColor: colors.grey5,
        },
      }}
    >
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color }) => (
            <TabBarIcon name="home-outline" color={color} />
          ),
        }}
      />
      {/* More tabs */}
    </Tabs>
  );
}
```

## 🎨 Provider Hierarchy Pattern

### ✅ CORRECT order (app/_layout.tsx):

```typescript
// app/_layout.tsx
export default function RootLayout() {
  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <ErrorBoundary>           {/* 1. Error handling */}
        <PostHogProvider>       {/* 2. Analytics */}
          <QueryClientProvider> {/* 3. Data fetching */}
            <Web3Provider>      {/* 4. Web3/Auth */}
              <BottomSheetModalProvider>  {/* 5. UI modals */}
                <ActionSheetProvider>     {/* 6. Action sheets */}
                  <NavThemeProvider>      {/* 7. Navigation theme */}
                    <Stack>
                      {/* Screens */}
                    </Stack>
                  </NavThemeProvider>
                </ActionSheetProvider>
              </BottomSheetModalProvider>
            </Web3Provider>
          </QueryClientProvider>
        </PostHogProvider>
      </ErrorBoundary>
    </GestureHandlerRootView>
  );
}
```

## 🎭 Conditional Rendering with __DEV__

### ✅ Show dev-only screens:

```typescript
// app/(tabs)/profile/_layout.tsx
<Drawer>
  <Drawer.Screen name="index" options={{ title: 'Profile' }} />
  
  {__DEV__ && (
    <Drawer.Screen
      name="devtools"
      options={{
        headerTitle: 'DevTools',
        drawerLabel: 'DevTools',
        drawerIcon: ({ size, color }) => (
          <MaterialIcons name="bug-report" size={size} color={color} />
        ),
      }}
    />
  )}
</Drawer>
```

## 🔗 Navigation Patterns

### 1. Navigate to route:

```typescript
import { router } from 'expo-router';

// Navigate to screen
router.push('/profile');
router.push('/send');

// Navigate with params
router.push({ pathname: '/profile', params: { id: '123' } });

// Go back
router.back();
```

### 2. Get route params:

```typescript
import { useLocalSearchParams } from 'expo-router';

function MyScreen() {
  const { id } = useLocalSearchParams<{ id: string }>();
  return <Text>ID: {id}</Text>;
}
```

## 🚫 NEVER DO:

- ❌ Put business logic in app/ screens (use features/)
- ❌ Skip Stack.Screen options
- ❌ Hardcode screen titles (use translations)
- ❌ Create screens without feature components
- ❌ Mix provider order (follow hierarchy)

## ✅ ALWAYS DO:

- ✅ Keep app/ screens simple (routing only)
- ✅ Put logic in features/
- ✅ Use Stack.Screen for configuration
- ✅ Use translations for titles
- ✅ Follow provider hierarchy
- ✅ Use __DEV__ for dev-only screens
- ✅ Use useColorScheme for theme colors

**App directory is for routing, features are for logic!**
